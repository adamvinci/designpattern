pour reperer un pattern:on fait un diagramme de classe
ex 1 : 
-Strategy/template methode : utile lorsque plusieurs algorithmes se ressemble marche ps pck ici on vx faire plusieurs traitement a la fois
-Observer : interface graphique chargeur envoie le ligne a tout les observeur et chacun analyse une ligne 
ex2 :
-Strategy : car listemot1 listemot2 listemot3 c'est presque les memes algorithme
2 et 3 :
Strategy/composite
pour le 2.4 : il faut un composite(on peux utiliser une arraylist ou le spread operator dans le cosntrcuteur voir 'Et' 'Ou'
 qui rajoute uen mehtode pour print le cmpt pas command pattern:(quand on sait qu'on doit faire qlq chose mais qu'on peut pas le faire
maitenant car il nous manque un truc) on choisis decorator(on implemen,te une classsemais on rajoute une methode,comportement initiale et faire des choses en plus
en cours d'execution)

strategy vs template method: on delegue pas sur strategy mais sur this donc la classe devient abstract

abstract factory(strategy) vs template method:
template method avec que 1new dedans->factory method(abstract class avec method)delegue a ses enfants
strategy avec un new ->abstract factory si on delegue vers une classe externe
3.c->Pattern : 1. Decorator (Captaine, Battleship)
     Pattern : Strategy qui joue le role c'est Distance, y a kilometre et miles
     Pattern : Adapteur avec la classe BattleFishingBoat prq prcq il encapsule un FishingBoat et il va a chaque fois changer le nom des m√©thodes
4:
state:strategy vs state c'est que state know about each other ,par ex quand ours dors attack=zzz quand reveiller attack==grr donc
etat =dormir/reveiller
enum x{comportement y},y{comportement y}
comportement par default
copier le code de base sans rien changer juste les etat = devient setEtat

5:
Builder:Ce pattern regle le fait que java contrairement a python ne permet pasde creer des parametres de constructeur optionel il faut ecrire null
builder dans la meme classe que user avec static
  public UserBuilder(String firstName, String lastName) {
            this.firstName = firstName;
            this.lastName = lastName;
        } public UserBuilder address(String address) {
                    this.address = address;
                    return this;
                }
                 public User build() {
                            return new User(this);
                        }
                           private User(UserBuilder builder) {
                                this.firstName = builder.firstName;
                                this.lastName = builder.lastName;
                                this.age = builder.age;
                                this.phone = builder.phone;
                                this.address = builder.address;
                            }
User lonerism = new User.Builder(firstName,lastName).adresse().build()
on utilise pas de set pour pas perdre l'avantage des objets immuable

7:
essayer de strategy Robot alors que robotimpl aslo implements Robot donc ca marche pas faut strategy sur une classe qui implemente robot pour avoir les strategy
un niveau en dessous des implementations

8:
solution prof :
 public abstract boolean valider(String numero);

    public CarteDeCredit creerCarte(String numero, Calendar dateExpiration, String nom) {
        if (successeur != null) {
          return   successeur.creerCarte(numero, dateExpiration, nom);
        } else {
            return null;  // or throw an exception if needed
        }
    }
    CarteDeCredit carteDeCredit = handler.creerCarte(parts[0], dateExpiration, parts[2]);
 public AmericanExpressHandler(Generateur successeur) {
    super(successeur);

  }

  @Override
  public boolean valider(String numero) {
    return (numero.length() == 15 && (numero.startsWith("37") || numero.startsWith("34")));

  }

  @Override
  public CarteDeCredit creerCarte(String numero, Calendar dateExpiration, String nom) {
    if (valider(numero)) {
      return new AmEx(numero, dateExpiration, nom);
    } else {
      return super.creerCarte(numero, dateExpiration, nom);
    }
  }